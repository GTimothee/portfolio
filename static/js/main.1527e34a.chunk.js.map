{"version":3,"sources":["components/Navbar/Navbar.js","components/Home/Home.js","components/Projects/Projects.js","components/Contact/Contact.js","components/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar","expand","Toggle","aria-controls","Collapse","id","Nav","className","Link","react_router_dom","to","React","Component","Home","Container","Row","Col","large","Projects","Contact","App","Jumbotron","components_Navbar_Navbar","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAwBeA,gLAjBX,OAEEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,OAAO,MACbJ,EAAAC,EAAAC,cAACC,EAAA,EAAOE,OAAR,CAAeC,gBAAc,qBAC7BN,EAAAC,EAAAC,cAACC,EAAA,EAAOI,SAAR,CAAiBC,GAAG,oBAClBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAKC,UAAU,WACbV,EAAAC,EAAAC,cAACO,EAAA,EAAIE,KAAL,KAAUX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,KAAT,SACVb,EAAAC,EAAAC,cAACO,EAAA,EAAIE,KAAL,KAAUX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,aAAT,aACVb,EAAAC,EAAAC,cAACO,EAAA,EAAIE,KAAL,KAAUX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,YAAT,sBAVDC,IAAMC,oCCeZC,yKAZX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MACAnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,OAAO,GAAZ,aACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,eAPSL,IAAMC,WCMVM,yKARX,OAAOrB,EAAAC,EAAAC,cAAA,UACGF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,8BALSY,IAAMC,WCMdO,yKAJX,MAAO,kBAFWR,IAAMC,0BCuCbQ,MA5Bf,WACE,OACIvB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWT,GAAG,OACZR,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAAA,oCAGFF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKV,GAAG,UACNR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACuB,EAAD,QAIJzB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKV,GAAG,QACNR,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWZ,IAC3BhB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWP,IACnCrB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWN,KAGpCtB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKV,GAAG,UACNR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,iBACAnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,eACAnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,kBCvBUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACPnC,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACkC,EAAD,OAGFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1527e34a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown, Form, Button, FormControl } from 'react-bootstrap';\nimport './Navbar.css'\n\nclass NavBar extends React.Component{\n  render(){\n    return (\n\n      <Navbar expand=\"lg\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link><Link to=\"/\">Home</Link></Nav.Link>\n            <Nav.Link><Link to=\"/Projects\">Projects</Link></Nav.Link>\n            <Nav.Link><Link to=\"/Contact\">Contact</Link></Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n    )\n  }\n}\n\nexport default NavBar\n","import React, {Component} from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass Home extends React.Component{\n  render(){\n    return (\n      <Container>\n        <Row>\n          <Col></Col>\n          <Col large={true}> Content </Col>\n          <Col></Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default Home\n","import React, {Component} from 'react';\n\nclass Projects extends React.Component {\n  render() {\n    return <ul>\n              <li>project1</li>\n              <li>project2</li>\n              <li>project3</li>\n            </ul>;\n  }\n}\n\nexport default Projects;\n","import React, {Component} from 'react';\n\nclass Contact extends React.Component {\n  render() {\n    return \"Hi there\";\n  }\n}\n\nexport default Contact;\n","import React from 'react';\nimport './App.css';\nimport NavBar from './../Navbar/Navbar.js'\nimport Home from './../Home/Home.js'\nimport Projects from './../Projects/Projects.js'\nimport Contact from './../Contact/Contact.js'\nimport { Route } from 'react-router-dom';\n\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App() {\n  return (\n      <Container id='app'>\n        <Jumbotron>\n          <h1>Timothée Guédon</h1>\n        </Jumbotron>\n\n        <Row id='header'>\n          <Col>\n            <NavBar />\n          </Col>\n        </Row>\n\n        <Row id='body'>\n          <Route path=\"/\" component={Home}/>\n          <Route path=\"/Projects\" component={Projects} />\n          <Route path=\"/Contact\" component={Contact}/>\n        </Row>\n\n        <Row id='footer'>\n          <Col>This is </Col>\n          <Col>2 of 3</Col>\n          <Col>3 of 3</Col>\n        </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nReactDOM.render((\n  <Router>\n    <App />\n  </Router>\n),\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}